---
import PhPaperPlaneBold from '@components/icons/phPaperPlaneBold.astro';
import PhAt from '@components/icons/phAt.astro';
import PhUserCircle from '@components/icons/phUserCircle.astro';
import PhChatCenteredDotsLight from '@components/icons/phChatCenteredDotsLight.astro';
import PhCheckCircle from '@components/icons/phCheckCircle.astro';
import PhXCircle from '@components/icons/phXCircle.astro';
import PhXBold from '@components/icons/phXBold.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import '@assets/styles/contact.css';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section id="contact" class="bg-codgray-50 px-6 py-20 transition-colors dark:bg-codgray-900 md:px-12">
    <div
        data-notification
        class="fixed -right-52 top-6 z-50 w-64 rounded border-b-2 bg-white p-4 pl-12 opacity-0 shadow-lg transition-all duration-300"
        data-success-title={t('contact.success.title')}
        data-success-desc={t('contact.success.desc')}
        data-error-title={t('contact.error.title')}
        data-error-title={t('contact.success.desc')}

    >
        <PhXCircle
            class:list="notification__icon__error size-6 hidden text-red-600 absolute inset-4"
        />
        <PhCheckCircle
            class:list="notification__icon__success size-6 hidden text-green-600 absolute inset-4"
        />
        <strong class="text-sm font-bold"></strong>
        <p class="text-xs font-light"></p>
        <button
            id="close__notification"
            type="button"
            class="absolute right-4 top-4 size-6 cursor-pointer text-codgray-600 transition-colors hover:text-codgray-950"
        >
            <PhXBold />
        </button>
    </div>

    <form
        id="contact__form"
        class="contact__form mx-auto max-w-7xl gap-24 py-20"
    >
        <h2 class="title">{t('menu.contact')}</h2>
        <p class="py-3 pb-10 text-left text-base tracking-wide text-codgray-950 transition-colors dark:text-white">
            {t('contact.p')}
        </p>

        <fieldset class="group grid grid-cols-1 gap-x-10 gap-y-4 pb-4 md:grid-cols-2">
            <label for="email" class="relative z-10 block w-full">
                <PhAt class:list="text-codgray-950 absolute inset-4 size-6 dark:text-codgray-50" />
                <input
                    type="email"
                    id="email"
                    name="email"
                    placeholder={`${t('contact.email')} *`}
                    required
                    pattern="[^@]+@[^@]+\\.[a-zA-Z]{2,10}"
                    autocomplete="off"
                    maxlength="200"
                    class="input__field w-full rounded border border-codgray-100 bg-white p-4 pl-12 text-codgray-950 caret-gray-500 outline-none transition-all duration-300 ease-in-out focus:border-codgray-300 dark:border-codgray-900 dark:bg-codgray-950 dark:text-codgray-50"
                />

                <span class="text-xs leading-none text-red-600 opacity-0 transition-opacity">{t('contact.error.email')}</span>
            </label>

            <label for="name" class="relative z-20 block w-full">
                <PhUserCircle
                    class:list="text-codgray-950 absolute inset-4 size-6 dark:text-codgray-50"
                />
                <input
                    type="text"
                    id="name"
                    name="name"
                    placeholder={`${t('contact.fullname')} *`}
                    required
                    autocomplete="off"
                    maxlength="40"
                    class="input__field w-full rounded border border-codgray-100 bg-white p-4 pl-12 text-codgray-950 caret-gray-500 outline-none transition-all duration-300 ease-in-out focus:border-codgray-300 dark:border-codgray-900 dark:bg-codgray-950 dark:text-codgray-50"
                />

                <span class="text-xs leading-none text-red-600 opacity-0 transition-opacity">{t('contact.error.fullname')}</span>
            </label>

            <label for="message" class="relative block md:col-span-2">
                <PhChatCenteredDotsLight
                    class:list="text-codgray-950 absolute inset-4 size-6 dark:text-codgray-50"
                />
                <textarea
                    id="message"
                    name="message"
                    placeholder={`${t('contact.message')} *`}
                    required
                    autocomplete="off"
                    maxlength="3000"
                    class="input__field h-48 max-h-56 w-full resize-y rounded border border-codgray-100 bg-white p-4 pl-12 text-codgray-950 caret-gray-500 outline-none transition-all duration-300 ease-in-out focus:border-codgray-300 dark:border-codgray-900 dark:bg-codgray-950 dark:text-codgray-50"
                ></textarea>

                <span class="text-xs leading-none text-red-600 opacity-0 transition-opacity">{t('contact.error.message')}</span>
            </label>
        </fieldset>

        <button
            id="contact__form__button"
            type="submit"
            class="group h-14 w-full max-w-full gap-3 overflow-hidden rounded bg-trinidad-600 py-4 text-base font-medium text-white transition-colors hover:bg-trinidad-700 disabled:bg-trinidad-300 md:max-w-96"
        >
            <div data-loading class="hidden flex-row justify-center gap-2">
                <div class="size-2 animate-bounce rounded bg-codgray-50"></div>
                <div class="size-2 animate-bounce rounded bg-codgray-50 [animation-delay:-.3s]"></div>
                <div class="size-2 animate-bounce rounded bg-codgray-50 [animation-delay:-.5s]"></div>
            </div>

            <div data-content>
                <span class="relative block transition-transform duration-500 group-hover:-translate-y-24">{t('contact.send_message')}</span>
                <PhPaperPlaneBold
                    class:list="size-6 text-white relative translate-y-24 mx-auto transition-all duration-500 group-hover:-translate-y-6"
                />
            </div>
        </button>
    </form>
</section>

<script>
    const contactForm = document.querySelector('#contact__form') as HTMLFormElement;
    const notificationElement = document.querySelector('[data-notification]');
    const closeNotification = document.querySelector('#close__notification');
    const loadingElement = document.querySelector('[data-loading]');
    const contentElement = document.querySelector('[data-content]');
    const basinUrl = 'https://usebasin.com/f/39da2d81e0d2';

    document.querySelectorAll('.input__field').forEach((inputField) => {
        inputField.addEventListener('focus', (event) => {
            const element = event.target as HTMLObjectElement;
            if (!element.checkValidity()) {
                element.setCustomValidity('');
            }
        });
    });

    contactForm?.addEventListener('submit', async (event) => {
        event.preventDefault();
        const contactFormButton = document.querySelector('#contact__form__button');
        contactFormButton?.setAttribute('disabled', 'true');

        loadingElement?.classList.remove('hidden');
        loadingElement?.classList.add('flex');
        contentElement?.classList.add('hidden');

        const formData = new FormData(event.target as HTMLFormElement);
        const body = Object.fromEntries(formData);

        let hasError = false;
        Object.entries(body).forEach(([key, value]) => {
            const cleanValue = (value as string).trim();

            body[key] = cleanValue;

            const fieldElement = (document.getElementById(key) as HTMLObjectElement);

            if (cleanValue.length === 0) {
                fieldElement?.setCustomValidity('required');
                hasError = true;
            }
        });

        if (hasError) {
            return false;
        }

        const result = await fetch(basinUrl, {
            method: 'POST',
            headers: { 'Content-type': 'application/json' },
            body: JSON.stringify(body),
        });

        const notificationTitle = notificationElement?.querySelector('strong');
        const notificationDesc = notificationElement?.querySelector('p');

        if (result.status === 200) {
            notificationElement?.classList.add('notification__show__success');

            if (notificationTitle) {
                notificationTitle.textContent = notificationElement?.getAttribute('data-success-title') || '';
            }

            if (notificationDesc) {
                notificationDesc.textContent = notificationElement?.getAttribute('data-success-desc') || '';
            }

            contactForm.reset();
        } else {
            notificationElement?.classList.add('notification__show__error');

            if (notificationTitle) {
                notificationTitle.textContent = notificationElement?.getAttribute('data-error-title') || '';
            }

            if (notificationDesc) {
                notificationDesc.textContent = notificationElement?.getAttribute('data-error-desc') || '';
            }
        }

        setTimeout(() => {
            notificationElement?.classList.remove(
                'notification__show__success',
                'notification__show__error',
            );
        }, 8500);

        loadingElement?.classList.remove('flex');
        loadingElement?.classList.add('hidden');
        contentElement?.classList.remove('hidden');

        contactFormButton?.removeAttribute('disabled');

        closeNotification?.addEventListener('click', () => {
            notificationElement?.classList.remove(
                'notification__show__success',
                'notification__show__error',
            );
        });
    });
</script>
