---
import PhTranslateBold from '@components/icons/phTranslateBold.astro';
import '@assets/styles/layout/header/side.css';
---

<aside class="flex justify-between items-center gap-4">
    <div id="switch-mode-container" title="Light mode" class="flex justify-between items-center gap-2">
        <input type="checkbox" class="hidden" id="mode" name="mode" />
        <label for="mode" class="block cursor-pointer group">
            <span class="sky">
                <span class="sphere group-active:w-6" />

                <span class="cloud scale-[0.35] translate-x-4 translate-y-1" />
                <span class="cloud scale-[0.35] translate-x-5 translate-y-2.5" />

                <span class="star dark:translate-x-3 dark:translate-y-2.5" />
                <span class="star dark:translate-x-4 dark:translate-y-1.5" />
                <span class="star dark:translate-x-2 dark:translate-y-[0.475rem]" />
                <span class="star dark:translate-x-4 dark:translate-y-3" />
            </span>
        </label>
        <strong class="side-text">Light mode</strong>
    </div>

    <div>
        <button id="locale-button" type="button" popovertarget="locale-popover" class="locale-button">
            <PhTranslateBold class:list="w-5 h-5 text-trinidad-600" />
            <span class="side-text">English</span>
        </button>

        <nav id="locale-popover" popover>
            <button type="button">French</button>
        </nav>
    </div>
</aside>

<script>
    const switchModeContainer = document.querySelector('#switch-mode-container');
    const modeInput = document.querySelector('#mode');

    modeInput?.addEventListener('change', (event) => {
        const target = event.currentTarget as HTMLInputElement;
        if (target && switchModeContainer) {
            if (target.checked) {
                document.documentElement.classList.add('dark');
                localStorage.theme = 'dark';
                switchModeContainer.setAttribute('title', 'Dark mode');
            } else {
                document.documentElement.classList.remove('dark');
                localStorage.theme = 'light';
                switchModeContainer.setAttribute('title', 'Light mode');
            }
        }
    });

    const localeButton = document.querySelector('#locale-button');
    localeButton?.addEventListener('click', () => {
        const target = localeButton.getAttribute('popovertarget');
        const popover = document.querySelector(`#${target}`) as HTMLDivElement;

        const computed = localeButton?.getBoundingClientRect();
        console.log('p', popover);
        if (popover) {
            popover.style.left = `${computed.x}px`;
            popover.style.top = `${computed.y}px`;
            popover.style.width = `${computed.width}px`;
        }
    });
</script>
